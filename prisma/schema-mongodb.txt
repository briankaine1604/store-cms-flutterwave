// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store{
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name String 
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  billboards Billboard[]
  category Category[] 
  color Color[]
  size Size[]
  products Product[]
  orders Order[]
}

model Billboard{
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  imgUrl String
  label String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()  
  Store Store @relation( fields: [storeId],references: [id])
  storeId String @db.ObjectId 
  categories Category[]


  @@index([storeId])
}

model Category{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  billboardId String @db.ObjectId
  billboard Billboard @relation(fields: [billboardId],references: [id])
  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id])
  products Product[]
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
@@index([billboardId])
@@index([storeId])
}


model Color {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id])
  product Product[] 
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
}

model Size {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id])
  product Product[] @relation(fields: [productId], references: [id])
  productId String[] @db.ObjectId
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
}

model Product {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  categoryId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id])
  category Category @relation(fields: [categoryId], references: [id] )
  name String
  price Float
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String[] @db.ObjectId
  colorId String @db.ObjectId
  size Size[] @relation(fields: [sizeId], references: [id])
  color Color @relation(fields: [colorId], references: [id])
  images Image[]
  orderItems OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
   @@index([sizeId])
   @@index([colorId])
}

model Image {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([productId])
}

model Order{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  orderId String @db.ObjectId
  order Order @relation(fields: [orderId], references: [id])
  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id])
  quantity    Int       @default(1)

  @@index([orderId])
  @@index([productId])
}

enum UserRole{
  ADMIN
  USER
}

model User{
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  // reviews Review[]
  
}

model Account {
 id    String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken{
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime


  @@unique([email,token])
}

model PasswordResetToken{
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model twoFactorToken{
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model TwoFactorConfirmation{
id    String  @id @default(auto()) @map("_id") @db.ObjectId
userId String @db.ObjectId   
user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@unique([userId])
}
